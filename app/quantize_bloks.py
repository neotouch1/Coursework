import cv2
import numpy as np

class QuantizeBlocks:

    def __init__(self, q_matrix=None, quality=0, block_size=8):

        self.block_size = block_size
        self.quality = quality

        if q_matrix is not None:
            self.q_matrices = q_matrix
        else:
            self.q_matrices = [
                np.array([
                    [16,11,10,16,24, 40, 51, 61],
                    [12,12,14,19,26, 58, 60, 55],
                    [14,13,16,24,40, 57, 69, 56],
                    [14,17,22,29,51, 87, 80, 62],
                    [18,22,37,56,68,109,103, 77],
                    [24,35,55,64,81,104,113, 92],
                    [49,64,78,87,103,121,120,101],
                    [72,92,95,98,112,100,103, 99]
                ]),
                np.array([
                    [17,18,24,47,99,99,99,99],
                    [18,21,26,66,99,99,99,99],
                    [24,26,56,99,99,99,99,99],
                    [47,66,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99]
                ]),
                np.array([
                    [17,18,24,47,99,99,99,99],
                    [18,21,26,66,99,99,99,99],
                    [24,26,56,99,99,99,99,99],
                    [47,66,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99]
                ])
            ]


    def scale_quantiztion_matrices(self, quality):
        if quality == 2:
            self.q_scale_matrices = [
                np.array([
                    [16,11,10,16,24, 40, 51, 61],
                    [12,12,14,19,26, 58, 60, 55],
                    [14,13,16,24,40, 57, 69, 56],
                    [14,17,22,29,51, 87, 80, 62],
                    [18,22,37,56,68,109,103, 77],
                    [24,35,55,64,81,104,113, 92],
                    [49,64,78,87,103,121,120,101],
                    [72,92,95,98,112,100,103, 99]
                ]),
                np.array([
                    [17,18,24,47,99,99,99,99],
                    [18,21,26,66,99,99,99,99],
                    [24,26,56,99,99,99,99,99],
                    [47,66,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99]
                ]),
                np.array([
                    [17,18,24,47,99,99,99,99],
                    [18,21,26,66,99,99,99,99],
                    [24,26,56,99,99,99,99,99],
                    [47,66,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99],
                    [99,99,99,99,99,99,99,99]
                ])
            ]
        elif quality == 5:
             self.q_scale_matrices = [
                np.array([
                    [16, 14, 13, 20, 30, 50, 64, 77],
                    [15, 15, 17, 24, 33, 77, 80, 73],
                    [17, 16, 20, 30, 50, 73, 88, 72],
                    [17, 21, 27, 36, 64,109,100, 78],
                    [22, 27, 45, 68, 82,132,124, 93],
                    [30, 44, 72, 84,107,138,150,122],
                    [64, 84,100,109,124,145,144,121],
                    [93,122,126,130,150,138,142,137]
                ]),
                np.array([
                    [17, 25, 33, 65,137,137,137,137],
                    [25, 29, 36, 91,137,137,137,137],
                    [33, 36, 76,137,137,137,137,137],
                    [65, 91,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137]
                ]),
                np.array([
                    [17, 25, 33, 65,137,137,137,137],
                    [25, 29, 36, 91,137,137,137,137],
                    [33, 36, 76,137,137,137,137,137],
                    [65, 91,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137],
                    [137,137,137,137,137,137,137,137]
                ])
            ]
        elif quality == 7:
             self.q_scale_matrices = [
                np.array([
                    [16, 18, 17, 27, 40, 67, 85,102],
                    [20, 20, 23, 35, 47,102,106, 96],
                    [23, 21, 27, 40, 67, 96,116, 95],
                    [23, 29, 37, 49, 85,145,134,104],
                    [30, 37, 60, 91,111,179,168,126],
                    [40, 58, 95,111,141,182,198,161],
                    [85,111,134,145,168,197,196,165],
                    [126,161,166,170,198,182,188,181]
                ]),
                np.array([
                    [17, 32, 43, 85,179,179,179,179],
                    [32, 37, 47,119,179,179,179,179],
                    [43, 47, 99,179,179,179,179,179],
                    [85,119,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179]
                ]),
                np.array([
                    [17, 32, 43, 85,179,179,179,179],
                    [32, 37, 47,119,179,179,179,179],
                    [43, 47, 99,179,179,179,179,179],
                    [85,119,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179],
                    [179,179,179,179,179,179,179,179]
                ])
            ]        
             

    def quantize_dct_bloks(self, bloks, quality=0):
        """
        Quantizes the DCT coefficients using the selected quality factor.
        
        Args:
            blocks (np.array): DCT blocks to quantize.
            quality (int): Quality factor (0 = default matrices).
        
        Returns:
            np.array: Quantized blocks.
        """
        #np.set_printoptions(precision=2, suppress=True)
        # print(bloks[:1, :, :, :, 1])
        if quality == 0:
            H, W, block_size, _, channels = bloks.shape
            self.quantized_blocks = np.zeros_like(bloks, dtype=np.int32)

            for c in range(channels):
                for i in range(H):
                    for j in range(W):
                        self.quantized_blocks[i, j, :, :, c] = np.round(bloks[i, j, :, :, c]
                                         / self.q_matrices[c][:self.block_size, :self.block_size])

            #print(self.quantized_blocks[:1, :, :, :, 1])
            return self.quantized_blocks
        
        else:
            self.scale_quantiztion_matrices(quality)
            H, W, block_size, _, channels = bloks.shape
            self.quantized_blocks = np.zeros_like(bloks, dtype=np.int32)


            for c in range(channels):
                for i in range(H):
                    for j in range(W):
                        self.quantized_blocks[i, j, :, :, c] = np.round(bloks[i, j, :, :, c] 
                                        / self.q_scale_matrices[c][:self.block_size, :self.block_size])

            #print(self.quantized_blocks[:1, :, :, :, 1])
            return self.quantized_blocks
        



        # Decoded
    def dequantize_blocks(self, quantized_blocks, block_size):
        """
        Восстановить коэффициенты DCT из квантованных значений.
        :param quantized_blocks: массив квантованных коэффициентов (H, W, block_size, block_size, channels)
        :param quality: параметр показывающий нужно спользовать встроенные матрицы квантования или кастомные
        :return: массив деквантованных коэффициентов DCT
        """
        #TODO  сделать по условию quality

        print(f"DEQUANT: {quantized_blocks.shape}")
        H, W, block_size, _, channels = quantized_blocks.shape
        dct_blocks = np.zeros_like(quantized_blocks, dtype=np.float32)

        for c in range(channels):
            for i in range(H):
                for j in range(W):
                    dct_blocks[i, j, :, :, c] = quantized_blocks[i, j, :, :, c] * self.q_matrices[c][:self.block_size, :self.block_size]

        return dct_blocks



















    # Y(16x16)
    # [16, 11, 10, 16, 24, 40, 51, 61, 66, 70, 74, 78, 82, 86, 90, 94],
    # [12, 12, 14, 19, 26, 58, 60, 55, 60, 64, 68, 72, 76, 80, 84, 88],
    # [14, 13, 16, 24, 40, 57, 69, 56, 62, 66, 70, 74, 78, 82, 86, 90],
    # [14, 17, 22, 29, 51, 87, 80, 62, 68, 72, 76, 80, 84, 88, 92, 96],
    # [18, 22, 37, 56, 68,109,103, 77, 82, 86, 90, 94, 98,102,106,110],
    # [24, 35, 55, 64, 81,104,113, 92, 96,100,104,108,112,116,120,124],
    # [49, 64, 78, 87,103,121,120,101,106,110,114,118,122,126,130,134],
    # [72, 92, 95, 98,112,100,103, 99,104,108,112,116,120,124,128,132],
    # [76, 96, 99,102,116,104,107,103,108,112,116,120,124,128,132,136],
    # [80,100,103,106,120,108,111,107,112,116,120,124,128,132,136,140],
    # [84,104,107,110,124,112,115,111,116,120,124,128,132,136,140,144],
    # [88,108,111,114,128,116,119,115,120,124,128,132,136,140,144,148],
    # [92,112,115,118,132,120,123,119,124,128,132,136,140,144,148,152],
    # [96,116,119,122,136,124,127,123,128,132,136,140,144,148,152,156],
    # [100,120,123,126,140,128,131,127,132,136,140,144,148,152,156,160],
    # [104,124,127,130,144,132,135,131,136,140,144,148,152,156,160,164]

    # CrCb(16x16)
    # [17, 18, 24, 47, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [18, 21, 26, 66, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [24, 26, 56, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [47, 66, 99, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [99, 99, 99, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [99, 99, 99, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [99, 99, 99, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [99, 99, 99, 99, 99, 99, 99, 99, 100,100,102,104,106,108,110,112],
    # [100,100,100,100,100,100,100,100,102,104,106,108,110,112,114,116],
    # [100,100,100,100,100,100,100,100,104,106,108,110,112,114,116,118],
    # [102,102,102,102,102,102,102,102,106,108,110,112,114,116,118,120],
    # [104,104,104,104,104,104,104,104,108,110,112,114,116,118,120,122],
    # [106,106,106,106,106,106,106,106,110,112,114,116,118,120,122,124],
    # [108,108,108,108,108,108,108,108,112,114,116,118,120,122,124,126],
    # [110,110,110,110,110,110,110,110,114,116,118,120,122,124,126,128],
    # [112,112,112,112,112,112,112,112,116,118,120,122,124,126,128,130]







    # Y(32x32)
    # [  16,   11,   10,   16,   24,   40,   51,   61,   12,   12,   14,   19,   26,   58,  101,  103,   77,   97,   97,   93,   82,   63,   59,   55,   64,   72,   85,   98,  112,  124,  145,  148],
    # [  11,   12,   14,   18,   24,   35,   48,   58,   14,   13,   16,   22,   31,   64,  105,  107,   85,  102,  101,   95,   79,   56,   50,   47,   56,   65,   76,   90,  106,  118,  133,  135],
    # [  10,   14,   16,   24,   35,   47,   60,   70,   16,   16,   18,   25,   36,   74,  110,  112,   91,  109,  109,  101,   86,   63,   57,   53,   63,   72,   86,  101,  118,  131,  147,  149],
    # [  16,   18,   24,   36,   47,   60,   73,   84,   21,   18,   20,   29,   41,   80,  115,  116,   94,  112,  111,  102,   86,   62,   56,   51,   61,   70,   85,   99,  116,  130,  146,  148],
    # [  24,   24,   28,   42,   59,   75,   88,  100,   28,   25,   27,   37,   50,   92,  129,  131,  108,  127,  126,  116,   98,   74,   67,   62,   72,   82,   97,  111,  130,  144,  160,  162],
    # [  40,   35,   38,   53,   68,   87,  100,  115,   38,   36,   39,   50,   62,  108,  144,  146,  121,  142,  141,  131,  112,   85,   77,   72,   83,   93,  107,  122,  142,  157,  174,  176],
    # [  51,   48,   51,   67,   85,  105,  120,  135,   51,   48,   51,   63,   76,  119,  153,  155,  127,  152,  151,  141,  120,   91,   84,   77,   89,  100,  114,  130,  152,  169,  187,  190],
    # [  61,   58,   63,   80,  100,  120,  136,  152,   61,   58,   62,   75,   90,  135,  169,  171,  142,  168,  167,  157,  134,  103,   95,   87,   99,  110,  124,  141,  164,  181,  200,  204],
    # [  77,   72,   76,   94,  114,  134,  149,  164,   74,   70,   72,   92,  106,  151,  183,  185,  152,  179,  178,  168,  144,  112,  104,   95,  107,  118,  134,  149,  174,  191,  210,  214],
    # [  101,   97,  102,  119,  141,  161,  175,  191,   92,   88,   90,  115,  128,  175,  205,  207,  169,  199,  198,  188,  162,  129,  120,  112,  124,  135,  152,  168,  191,  210,  228,  232],
    # [  103,  100,  103,  121,  144,  164,  178,  194,  105,  101,  104,  118,  133,  180,  210,  212,  174,  204,  203,  193,  166,  132,  123,  114,  126,  137,  154,  170,  193,  212,  230,  234],
    # [  105,  102,  106,  124,  148,  169,  183,  199,  111,  106,  109,  122,  137,  186,  216,  218,  179,  210,  209,  199,  170,  136,  127,  118,  130,  141,  158,  174,  197,  216,  234,  238],
    # [  113,  109,  114,  133,  156,  177,  191,  206,  120,  115,  118,  132,  148,  199,  230,  232,  192,  224,  223,  213,  183,  148,  139,  129,  142,  153,  170,  187,  210,  229,  247,  251],
    # [  124,  119,  123,  142,  166,  188,  202,  217,  128,  123,  126,  141,  157,  210,  241,  243,  202,  235,  234,  223,  193,  157,  148,  137,  151,  162,  179,  196,  219,  238,  257,  261],
    # [  129,  124,  128,  148,  172,  194,  208,  223,  136,  131,  134,  149,  165,  218,  250,  252,  210,  243,  242,  231,  200,  164,  155,  144,  158,  169,  186,  203,  226,  245,  264,  268],
    # [  137,  131,  136,  157,  181,  203,  217,  232,  142,  138,  141,  156,  172,  225,  257,  259,  217,  251,  250,  239,  208,  171,  162,  151,  166,  177,  194,  211,  234,  253,  272,  276],
    # [140, 134, 135, 145, 161, 175, 188, 202, 217, 237, 251, 264, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317],
    # [169, 156, 158, 174, 186, 199, 211, 224, 237, 251, 264, 278, 289, 300, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330],
    # [140, 134, 135, 145, 161, 175, 188, 202, 217, 237, 251, 264, 277, 289, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317],
    # [169, 156, 158, 174, 186, 199, 211, 224, 237, 251, 264, 278, 289, 300, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330],
    # [180, 166, 170, 179, 186, 199, 211, 224, 237, 251, 264, 277, 289, 299, 309, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336],
    # [190, 172, 164, 179, 186, 199, 211, 224, 237, 251, 264, 277, 289, 299, 309, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336],
    # [195, 173, 168, 181, 190, 198, 211, 223, 237, 252, 264, 278, 290, 299, 310, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337],
    # [195, 173, 168, 181, 190, 198, 211, 223, 237, 252, 264, 278, 290, 299, 310, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337],
    # [200, 183, 177, 188, 198, 210, 223, 236, 249, 261, 272, 284, 294, 306, 317, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344],
    # [210, 190, 186, 199, 209, 221, 233, 245, 258, 270, 281, 293, 303, 315, 326, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353],
    # [210, 191, 185, 198, 208, 221, 232, 243, 255, 267, 278, 289, 300, 311, 322, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349],
    # [225, 200, 191, 207, 217, 229, 241, 252, 263, 274, 285, 296, 307, 318, 329, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356],
    # [240, 220, 210, 223, 232, 244, 256, 268, 280, 291, 302, 313, 324, 335, 346, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373],
    # [250, 230, 215, 228, 237, 249, 261, 273, 285, 296, 307, 318, 329, 340, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378],
    # [240, 220, 210, 223, 232, 244, 256, 268, 280, 291, 302, 313, 324, 335, 346, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373],
    # [250, 230, 215, 228, 237, 249, 261, 273, 285, 296, 307, 318, 329, 340, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378]


    # Cb(32x32)
    # [  17,   18,   24,   47,   99,  122,  142,  176,   24,   30,   42,   54,   75,   94,  123,  138,  145,  149,  155,  157,  158,  162,  167,  172,  181,  191,  198,  202,  214,  223,  231,  236],
    # [  18,   24,   27,   43,   94,  121,  140,  173,   28,   35,   48,   61,   83,  102,  131,  145,  152,  156,  162,  164,  165,  169,  174,  179,  188,  198,  206,  211,  223,  232,  240,  245],
    # [  24,   27,   33,   56,  106,  133,  153,  187,   35,   41,   55,   70,   93,  113,  142,  157,  163,  167,  172,  174,  175,  179,  184,  189,  198,  208,  216,  221,  232,  241,  249,  254],
    # [  47,   43,   49,   79,  135,  165,  186,  218,   55,   61,   75,   88,  113,  131,  159,  175,  181,  185,  190,  192,  193,  197,  202,  207,  215,  225,  233,  238,  249,  258,  266,  271],
    # [  99,   94,   106,  135,  181,  213,  233,  267,   83,   88,   103,  116,  142,  160,  189,  204,  210,  214,  219,  221,  222,  226,  231,  236,  244,  253,  261,  266,  277,  286,  294,  299],
    # [  122,  121,  133,  165,  213,  244,  265,  298,  102,  106,  121,  136,  161,  179,  208,  223,  228,  232,  237,  239,  240,  244,  249,  254,  263,  272,  280,  285,  296,  305,  313,  318],
    # [  142,  140,  153,  186,  233,  265,  286,  320,  121,  125,  141,  155,  180,  198,  227,  242,  248,  252,  257,  259,  260,  264,  269,  274,  282,  291,  299,  304,  315,  324,  332,  337],
    # [  176,  173,  187,  218,  267,  298,  319,  352,  138,  143,  158,  172,  198,  216,  246,  261,  267,  271,  276,  278,  279,  283,  288,  293,  301,  310,  318,  323,  334,  343,  351,  356],
    # [  24,   30,   35,   55,   83,  102,  115,  140,   10,   12,   16,   19,   24,   29,   38,   42,   45,   47,   49,   50,   51,   53,   55,   56,   58,   59,   60,   61,   62,   64,   66,   67],
    # [  30,   35,   41,   70,  116,  144,  169,  199,   12,   16,   19,   24,   31,   37,   47,   52,   56,   58,   61,   62,   64,   66,   69,   70,   71,   74,   76,   77,   79,   81,   82,   83],
    # [  42,   48,   55,   88,  142,  174,  202,  235,   16,   19,   23,   28,   37,   43,   53,   58,   63,   65,   68,   70,   71,   73,   75,   76,   78,   80,   81,   83,   85,   87,   88,   89],
    # [  54,   61,   70,   116,  160,  193,  222,  256,   19,   23,   27,   33,   42,   48,   59,   64,   69,   71,   74,   75,   77,   79,   81,   82,   84,   86,   88,   90,   92,   93,   94,   95],
    # [  75,   83,   93,   142,  186,  220,  250,  285,   24,   28,   32,   39,   48,   55,   66,   71,   76,   79,   82,   84,   85,   87,   89,   91,   93,   95,   97,   99,  101,  102,  104,  105],
    # [  94,   102,  113,  160,  205,  239,  269,  303,   28,   32,   36,   43,   53,   60,   71,   77,   82,   85,   89,   91,   93,   95,   97,   99,  101,  103,  105,  107,  109,  110,  112,  113],
    # [ 137, 145, 153, 159, 163, 168, 172, 175, 179, 183, 188, 192, 197, 201, 205, 210, 215, 219, 223, 227, 231, 235, 240, 244, 248, 252, 257, 261, 265, 269, 273, 277],
    # [ 145, 153, 161, 168, 173, 177, 182, 186, 190, 195, 199, 204, 209, 213, 218, 223, 228, 233, 237, 241, 245, 250, 254, 259, 263, 267, 272, 276, 280, 284, 288, 292],
    # [ 153, 161, 169, 176, 181, 186, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270, 275, 280, 285, 290, 295, 300, 305, 310, 315],
    # [ 159, 168, 176, 183, 188, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323],
    # [ 163, 173, 181, 188, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328],
    # [ 168, 177, 186, 193, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333],
    # [ 172, 182, 190, 198, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338],
    # [ 175, 186, 195, 203, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343],
    # [ 179, 190, 199, 208, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348],
    # [ 183, 195, 204, 213, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353],
    # [ 188, 199, 208, 218, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358],
    # [ 192, 204, 213, 223, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363],
    # [ 197, 209, 218, 228, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368],
    # [ 201, 213, 223, 233, 238, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373],
    # [ 205, 218, 227, 237, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378],
    # [ 210, 223, 233, 243, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383],
    # [ 215, 228, 238, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383, 388],
    # [ 215, 228, 238, 248, 253, 258, 263, 268, 273, 278, 283, 288, 293, 298, 303, 308, 313, 318, 323, 328, 333, 338, 343, 348, 353, 358, 363, 368, 373, 378, 383, 388]
